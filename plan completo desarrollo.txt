1. ESTRUCTURA DE CARPETAS:
Crea manualmente esta estructura en tu computadora:
xynera-ia-planner/
├── backend/
│   ├── routes/
│   │   ├── autopilot.js
│   │   ├── eva.js
│   │   ├── esg.js
│   │   ├── security.js
│   │   ├── integration.js
│   │   └── monitoring.js
│   ├── package.json
│   └── server.js
├── frontend/
│   ├── pages/
│   │   └── index.js
│   └── package.json
├── tests/
│   └── autopilot.test.js
└── .env

2. CONTENIDO DE LOS ARCHIVOS:

== backend/server.js ==
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// Conexión a MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB Conectado'))
  .catch(err => console.error(err));

// Rutas
app.use('/api/autopilot', require('./routes/autopilot'));
app.use('/api/eva', require('./routes/eva'));
app.use('/api/esg', require('./routes/esg'));
app.use('/api/security', require('./routes/security'));
app.use('/api/integration', require('./routes/integration'));
app.use('/api/monitoring', require('./routes/monitoring'));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Servidor en puerto ${PORT}`));

== backend/routes/autopilot.js ==
const express = require('express');
const router = express.Router();

router.post('/optimize', (req, res) => {
  const { query } = req.body;
  const optimizedQuery = query.replace(/SELECT \*/g, 'SELECT id, name');
  res.json({ optimizedQuery, savings: '45%' });
});

module.exports = router;

== backend/routes/eva.js ==
const express = require('express');
const router = express.Router();

router.post('/message', (req, res) => {
  const { message } = req.body;
  if (message.includes('evento')) {
    res.json({ response: '¿Quieres crear un evento?' });
  } else {
    res.json({ response: 'No entendí tu mensaje' });
  }
});

module.exports = router;

== backend/routes/esg.js ==
const express = require('express');
const router = express.Router();

router.post('/calculate', (req, res) => {
  const { energyUsage } = req.body;
  const carbonFootprint = energyUsage * 0.5;
  res.json({ carbonFootprint, recommendation: 'Reducir uso en 20%' });
});

module.exports = router;

== backend/routes/security.js ==
const express = require('express');
const router = express.Router();

router.get('/alerts', (req, res) => {
  res.json([{ id: 1, threat: 'Acceso sospechoso', level: 'high' }]);
});

module.exports = router;

== backend/routes/integration.js ==
const express = require('express');
const router = express.Router();

router.post('/sync', (req, res) => {
  res.json({ status: 'Sincronización exitosa' });
});

module.exports = router;

== backend/routes/monitoring.js ==
const express = require('express');
const router = express.Router();

router.get('/predict', (req, res) => {
  res.json({ prediction: 'Fallo en servidor 3 en 24h' });
});

module.exports = router;

== backend/package.json ==
{
  "name": "backend",
  "version": "1.0.0",
  "scripts": {
    "start": "node server.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.6.3",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  }
}

== frontend/pages/index.js ==
import axios from 'axios';

export default function Home() {
  const handleOptimize = async () => {
    const res = await axios.post('http://localhost:5000/api/autopilot/optimize', {
      query: 'SELECT * FROM users'
    });
    alert(`Consulta optimizada: ${res.data.optimizedQuery}`);
  };

  return (
    <div>
      <button onClick={handleOptimize}>
        Optimizar Consulta
      </button>
    </div>
  );
}

== frontend/package.json ==
{
  "name": "frontend",
  "version": "0.1.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "axios": "^1.6.2",
    "next": "13.5.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}

== tests/autopilot.test.js ==
const request = require('supertest');
const app = require('../backend/server');

describe('Autopilot Endpoint', () => {
  it('Debería optimizar una consulta SQL', async () => {
    const res = await request(app)
      .post('/api/autopilot/optimize')
      .send({ query: 'SELECT * FROM users' });
    expect(res.statusCode).toEqual(200);
    expect(res.body.optimizedQuery).toContain('SELECT id, name');
  });
});

== .env ==
MONGO_URI=mongodb://localhost:27017/xynera
JWT_SECRET=your-secret-key
PORT=5000

3. INSTRUCCIONES DE USO:
1. Instala MongoDB localmente o usa MongoDB Atlas
2. En la terminal:
   # Backend
   cd backend
   npm install
   node server.js

   # Frontend (en nueva terminal)
   cd frontend
   npm install
   npm run dev

3. Accede a http://localhost:3000
4. Para tests: npm test en la carpeta backend